<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    
    <!-- message = org.mule.el.context.MessageContext -->
    
    <http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="9876" basePath="mulelearning" doc:name="HTTP Listener Configuration"/>
     
     <configuration doc:name="Configuration">
        <expression-language autoResolveVariables="true">
	    	<import class="org.mule.util.StringUtils" />
	    	<import name="rsu" class="org.apache.commons.lang.RandomStringUtils" />
	    	<alias name="appName" expression="app.name" />
	    	<global-functions > 
	      		def reversePayload() { StringUtils.reverse(message.payloadAs(java.lang.String)) }
	      		def randomString(size) { rsu.randomAlphanumeric(size) }
	    	</global-functions>
  		</expression-language>
    </configuration>
    
    <flow name="mule-learning-mel-basics">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melbasics" doc:name="HTTP"/>
        <!-- Current project directory : /home/rahul/Dev/Mule/Learning/Workspace/.mule/./.mule/mule-learning-mel -->
        <logger message="#[app.workDir]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="age" value="#[12]" doc:name="Variable" />
        <set-variable variableName="weight" value="65" doc:name="Variable" />
        <logger level="INFO" message="#[age+4]" doc:name="Logger"/>
        <logger level="INFO" message="#[weight+4]" doc:name="Logger"/>
        <set-variable variableName="fname" value="#['sai']" doc:name="Variable" />
        <set-variable variableName="lname" value="baba" doc:name="Variable" />
        <logger message="#[flowVars]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="my.loc" value="Hyderabad" doc:name="Variable" />
        <logger message="age : #[flowVars.age] or age : #[flowVars['age']]" level="INFO" doc:name="Logger"/>
        <logger message="loc : #[flowVars.'my.loc']" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="mule-learning-mel-or">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melor" doc:name="HTTP"/>
        <json:json-to-object-transformer doc:name="JSON to Object" returnClass="java.lang.Object"/>
        <logger message="Null safe : #[payload.god.avatar.?name] Othrwise throws NullPointerException at runtime if name doesn't exist" level="INFO" doc:name="Logger"/>
        <set-variable variableName="godname" value="Sai Malik" doc:name="Variable"/>
        <logger message="#[payload.god.avatar.?name or  godname] " level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="mule-learning-mel-fp">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melfp" doc:name="HTTP"/>
        <json:json-to-object-transformer doc:name="JSON to Object" returnClass="java.lang.Object"/>
    	<set-payload value="#[($.name.fname in payload.persons if $.name.lname=='baba').toString()]" doc:name="Set Payload"/>
    </flow>
    
    <flow name="mule-learning-mel-sp">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melsp" doc:name="HTTP"/>
        <logger level="INFO" message="${mule.home} = File system path to the home directory of the Mule server installation " doc:name="Logger"/>
    	<!-- <logger level="INFO" message="${mule.base} = File system path to the home directory of the Mule server installation " doc:name="Logger"/> -->
    	<logger level="INFO" message="#[app.name]" doc:name="Logger"/>
    	<logger level="INFO" message="#[app.workDir]" doc:name="Logger"/>
    	<!-- Accessing environment variables from OS or from environment variables set while running mule app -->
    	<logger level="INFO" message="${JAVA_HOME}" doc:name="Logger"/>
    	<logger level="INFO" message="${my.proj.classpath}" doc:name="Logger"/>
    	<!-- Accessing VM arguments -->
    	<logger level="INFO" message="${my.vm.var}" doc:name="Logger"/>
        <expression-component doc:name="Expression"><![CDATA[Properties p = System.getProperties();
 p.list(System.out);]]></expression-component>
    </flow>
    
    <flow name="mule-learning-melFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melglobal" doc:name="HTTP"/>
        <logger level="INFO" message="#[randomString(20)]" doc:name="Logger"/>
        <logger level="INFO" message="#[function:randomString:20]" doc:name="Logger"/>
        <logger level="INFO" message="#[reversePayload()]" doc:name="Logger"/>
        <logger level="INFO" message="#[appName]" doc:name="Logger"/>
        <logger level="INFO" message="${mule.home}" doc:name="Logger"/>
        <set-variable value="#[['Sai','Baba','Malik']]" variableName="list" doc:name="Variable" />
        <logger level="INFO" message="#[list.get(1)] or #[list[1]]" doc:name="Logger"/>
    </flow>
    
     <flow name="mule-learning-melFlow-empty">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melempty" doc:name="HTTP"/>
        <logger level="INFO" message="#[regex('^(sai)')]"/>
        <logger level="INFO" message="#[payload == null] is false" doc:name="Logger"/>
        <set-payload  value="#[null]" doc:name="Set Payload"/>
        <logger message="#[payload == null] is true" level="INFO" doc:name="Log Message"/>
    	<set-payload value="#['']" doc:name="Payload" />
    	<logger message="#[payload == empty] is true" level="INFO" doc:name="Log Message"/>
    	<set-payload value="#['       ']" doc:name="Payload" />
    	<logger message="#[payload == empty] is false" level="INFO" doc:name="Log Message"/>
    	<set-payload value="#[ ]" doc:name="Payload" />
    	<logger message="#[payload == empty] is true" level="INFO" doc:name="Log Message"/>
    	<set-payload value="#[       ]" doc:name="Payload" />
    	<logger message="#[payload == empty] is true" level="INFO" doc:name="Log Message"/>
    	<!-- empty array -->
    	<set-variable variableName="myvar" value="#[{}]" doc:name="Variable" />
    	<logger message="#[myvar == empty] is true" level="INFO" doc:name="Log Message"/>
    	<!-- empty collection -->
    	<set-variable variableName="myvar" value="#[[]]" doc:name="Variable" />
    	<logger message="#[myvar == empty] is true" level="INFO" doc:name="Log Message"/>
    	<set-variable variableName="myvar" value="#[0]" doc:name="Variable" />
    	<logger message="#[myvar == empty] is true" level="INFO" doc:name="Log Message"/>
    	<set-variable variableName="myvar" value="#[false]" doc:name="Variable" />
    	<logger message="#[myvar == empty] is false" level="INFO" doc:name="Log Message"/>
    </flow>
     <flow name="mule-learning-melFlow-regex">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/melregex" doc:name="HTTP"/>
        <set-variable variableName="mystring" value="#['To: baba\rFrom: Rahul\rCc: God\rHappy Father']" doc:name="Variable" />
        <!-- The following is applied on flowVar mystring -->
        <logger level="INFO" message="#[regex('^(To|From|Cc)',mystring)]" doc:name="Logger"/>
        <!-- The following is applied on payload -->
        <logger level="INFO" message="#[regex('^(sai)(baba)$')]" doc:name="Logger"/>
    </flow>
    
    <flow name="mule-learning-mel-true">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/meltrue" doc:name="HTTP"/>
        <!-- Any boolean true or 'true' or string true or any other non empty string evaluates to true -->
        <set-variable variableName="someVar" value="#['true']" doc:name="Variable" />
        <logger message="#[flowVars.someVar == true] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="true" doc:name="Variable" />
        <logger message="#[flowVars.someVar == true] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="#[true]" doc:name="Variable" />
        <logger message="#[flowVars.someVar == true] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="#['somevarval']" doc:name="Variable" />
        <logger message="#[flowVars.someVar == true] is true" level="INFO" doc:name="Log Message"/>
        
        <!-- Any boolean false or 'false' or string false or any other empty string evaluates to false -->
        <set-variable variableName="someVar" value="#['True']" doc:name="Variable" />
        <logger message="#[flowVars.someVar == false] is false" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="#[false]" doc:name="Variable" />
        <logger message="#[flowVars.someVar == false] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="#['false']" doc:name="Variable" />
        <logger message="#[flowVars.someVar == false] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="false" doc:name="Variable" />
        <logger message="#[flowVars.someVar == false] is true" level="INFO" doc:name="Log Message"/>
        
        <set-variable variableName="someVar" value="#['']" doc:name="Variable" />
        <logger message="#[flowVars.someVar == false] is true" level="INFO" doc:name="Log Message"/>
    </flow>
    
</mule>
