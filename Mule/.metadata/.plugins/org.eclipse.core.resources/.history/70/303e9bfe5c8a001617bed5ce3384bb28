<?xml version="1.0" encoding="UTF-8"?>

<mule
  xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
  xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
  xmlns:ss="http://www.springframework.org/schema/security"
  xmlns="http://www.mulesoft.org/schema/mule/core" 
  xmlns:context="http://www.springframework.org/schema/context" 
  xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
  xmlns:spring="http://www.springframework.org/schema/beans" 
  xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
  xmlns:oauth2-provider="http://www.mulesoft.org/schema/mule/oauth2-provider"
  xmlns:http="http://www.mulesoft.org/schema/mule/http"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
      http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
      http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd
      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
      http://www.mulesoft.org/schema/mule/oauth2-provider http://www.mulesoft.org/schema/mule/oauth2-provider/current/mule-oauth2-provider.xsd
      http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
      http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
      http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

  <!-- application properties; environment specific properties loaded based on mule.env property set in CloudHub -->
  <context:property-placeholder location="config.properties"/>

  <!-- register a security manager within the mule application -->
  <mule-ss:security-manager name="multiple-users-security-manager" doc:name="Spring Security Provider">
    <mule-ss:delegate-security-provider name="resourceOwnerSecurityProvider" delegate-ref="resourceOwnerAuthenticationManager"/>
  </mule-ss:security-manager>

  <!-- requests external auth service to validate user credentials -->
  <spring:beans>
    <spring:bean class="com.mulesoft.AuthProvider" id="authProvider" scope="singleton">
      <spring:property name="authenticationHost" value="${http.authenticate.host}"/>
      <spring:property name="authenticationPort" value="${http.authenticate.port}"/>
      <spring:property name="authenticationPath" value="${http.authenticate.path}"/>
      <spring:property name="authenticationHTTPConnector" value="httpAuthentication"/>
    </spring:bean>
    <ss:authentication-manager id="resourceOwnerAuthenticationManager">
      <ss:authentication-provider ref="authProvider" />
    </ss:authentication-manager>
  </spring:beans>

  <http:request-config name="httpAuthentication" host="${http.authenticate.host}" port="${http.port}" basePath="${http.mock.provider.endpoint}" protocol="HTTP" doc:name="HTTP Requestor"/>

  <!-- store oauth client-specific info -->
  <api-platform-gw:client-store id="multiple-users-client-store" doc:name="Client Store"/>

  <!-- validates incoming client credentials -->
  <api-platform-gw:client-security-provider id="multiple-users-client-security-provider" doc:name="Security Provider"/>

  <!-- oauth provider settings -->
  <oauth2-provider:config
    name="oauth2-provider"
    providerName="${oauth.provider.name}"
    resourceOwnerSecurityProvider-ref="resourceOwnerSecurityProvider"
    clientSecurityProvider-ref="multiple-users-client-security-provider"
    clientStore-ref="multiple-users-client-store"
    defaultScopes="" 
    supportedGrantTypes="${oauth.supported.grant.types}" 
    authorizationEndpointPath="${oauth.authorization.endpoint.path}" 
    accessTokenEndpointPath="${oauth.access.token.endpoint.path}" 
    enableRefreshToken="${oauth.enable.token.refresh}"
    listenerConfig-ref="https.listener"
    tokenTtlSeconds="${oauth.token.ttl}"
    doc:name="OAuth provider module">
  </oauth2-provider:config>

</mule>
